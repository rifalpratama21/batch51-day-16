Variable, typedata, operator, conditonal, function.
=================================================
Variable => tempat menyimpan data/nilai (value)
var, let, const 

Tipe Data  (Typedata) => Jenis Data, ada yang Primitif/Non Primitif. 
Primitif => "String", Number (integer, floats), Boolean, Undefined, Null
Conditional => Mengerjakan suatu task sesuai kondisi.
Function => Block code yang memiliki tujuan tertentu.


====================================================
var
let
const 

=> huruf, bhs inggris, camelCase, -, _

let myName = "Dandi Saputra"
console.log(myName)

myName = "Denis" 
console.log(myName)

const age = 25
age = 18

console.log(age)


var isMarried = false
isMarried = true

console.log(isMarried)


var yourName = "Ridho anugrah"
console.log(yourName)

var yourName = "Abdurrasyid"
console.log(yourName)

let yourName = "Silvie Nurcahyani"
console.log(yourName)

let yourName = "Sacrum"
console.log(yourName)

=============================================================================

typescript
let myName: string = "Dandi Saputra"

var myName string
myName := "dandi saputra"

Number
const age = 25
console.log(age)


string
let username = 'IvanValiantYangSelaluTersakiti08123543948326743298'
console.log(typeof username)


Undifined
const x = undefined
console.log(x)

null
const x = null
console.log(x)

const x = 0
console.log(x)

boolean
const isMarried = false
console.log(typeof isMarried)

let nilai = "ujian"

string, number, boolean, undefined, null, float

==============================================================
DAY 2

let myAge = "15"

if(myAge < 18) {
  alert("Kamu masih bocil")
} 

if(myAge < 18) {
  alert("Kamu masih bocil")
} else {
  alert("Kamu sudah dewasa")
} 

if(myAge < 18) {
  alert("Kamu masih bocil")
} else if(myAge < 30) {
  alert("Kamu sudah dewasa")
} else {
  alert("Kamu sudah usia lanjut")
}

=, ==, === "=>" <=, <==

let myAge = "abc"
if(myAge < 15) {
  alert("Benar nilainya")
} else {
  alert("Salah tipe data")
}


==============================================================
DAY 3

Named Function, Arrow Function, Function Expression

named function
function nameFunction() {
  // block code execute
}

nameFunction()

deklarasi, eksekusi, parameter, argument, return

function sayHello(value1, value2, value3, value4) {
  console.log(value1)
  console.log(value2)
  console.log(value3)
}

sayHello(34, 21, 33)


const greeting = () => {
  console.log("Say hello")
}

greeting()

function sayHello() {
  // proces 1
  // proces 2
  // proces 3

  return `nasi sudah matang silahkan diambil`
}

console.log(sayHello())

Block scope => global, local


const sum = (start, end) => {
  const PI = 3.14
  return PI + end
}

console.log(sum(5))




==========================================================================
DAY 4 (Recapt)

conditonal => sebuah tugas yang kita kerjakan berdasarkan kondisi apa yang kita terima.
Jika, hari minggu tugas selesai. maka, saya akan liburan.
Jika tugas belum selesai. maka, selesaikan tugas.

const task = true

if (task) {
  console.log("Kuy liburan")
} else {
  console.log("finish task")
}

const status = "customer"

if (status == "admin") {
  console.log("Halaman Penjual")
} else {
  console.log("halaman pembeli")
}


Day 4  :
- Non primitive type datas. 
- what is object ?
- what is array ?
- what is array of object ?
- looping ?
- concate, template literal ?

Type data non primitive => object yang memiliki fungsi dan property.
Object => Kumpulan data.
Array => Kumpulan data.
Array of Object => Kumpulan data tapi object2nya beragam ada value ada string dst.

type data non primitive.
memiliki lebih dari satu typedata.
type data yang kita buat.
object, array, array of object.

object
const MyBio = {
  name: "dandi saputra",
  age: 18,
  isMarried: false,
  distance: 2,
  myHobby: {
    hobby1: "coding",
    hobby2: "mobile legends",
    hobby3: "nonton anime"
  }
}

const date = new Date()

console.log(MyBio.name)
console.log(MyBio.isMarried)
console.log(MyBio.myHobby.hobby2)
console.log(MyBio)
console.info(typeof MyBio)
console.info(typeof date)
console.info(date)


Array 
[] [] [] [] [] [] [] = 7 => array.length
0, 1, 2 dst => index
["Dandi saputra"] [18] [true] ["Mentor FS"] ["Dumbways.ID"] ["Indonesia"]

const myBio = ["Dandi saputra", 18, true, "Mentor FS", "Dumbways.ID", "Indonesia"]

console.table(myBio)
console.log(myBio[3])

const MyBio = {
  name: "dandi saputra",
  age: 18,
  isMarried: false,
  distance: 2,
  myHobby: {
    hobby1: "coding",
    hobby2: "mobile legends",
    hobby3: "nonton anime"
  }
}

console.log(MyBio.name, MyBio.isMarried)

array of object
const myBio = ["Dandi", 18, true, { "id": 1, name: "laki-laki"}]

console.table(myBio)
const talent = [
  {
    id: 1,
    name: "Mei Kristian Loli",
    isVip: false
  },
  {
    id: 2,
    name: "Ivan",
    isVip: true
  },
  {
    id: 3,
    name: "Silvi",
    isVip: false,
    hobby: [
      {
        id: 1,
        name: "tiktokan",
      },
      {
        id: 2,
        name: "rebahan",
      }
    ]
  }
]

console.log(talent)
console.table(talent)
console.log(talent[2].name)
console.log(talent[2]?.hobby[0]?.name)


Looping => aksi yang sama dilakukan berulang ulang.
for, while, do while.
for(expression1 => nilai awal; expression2 => kondisi; expression3 => aksi selanjutnya) {
  block code => kode yang di eksekusi
}

console.log("Hello world 1")
console.log("Hello world 2")
console.log("Hello world 3")
console.log("Hello world 4")
console.log("Hello world 5")

for(let i = 0; i < 5; i++) {
  console.log(`Hello world ${i}`)
  console.log("Hello world " + i)
}

for(let i = 10; i > 0; i--) {
  console.log(`Hello world ${i}`)
  console.log("Hello world " + i)
}



========================================================================================================
DAY 5

=> Operator (aritmatic, comparation, ternary, gerbang logika)

const start = 10
const end = 20
const result = end % start

console.log(result);


let start = 10 + 20
console.log(start);

let end = 20
console.log(end);

start += end
console.log(start);

const result = start + end

1
2
hasil 
2

1
2
hasilnya
1
2

>
<
==
>=
<=
!=
===

=, ==, ===

let a = 1
let b = "1"

a === b




const isVip = true
const message = isVip ? "Kamu member vip" : "Minimal langganan bos"

console.log(message)

const isVip = true
const pay = false
const message = (!isVip) ? "Kamu member vip" : "Minimal langganan bos"

console.log(message)

const jodi = 22
const juna = 34
const silvi = 30

// && = harus semua kodisi bernilai benar
// || = minimal satu kodisi bernilai benar

if(jodi < 40 || juna > 40 && silvi < 20) {
  console.log("Mereka belum usia lanjut")
} else {
  console.log("Banyakin ibadah bang")
}


const MySon = false

if(!MySon) {
  console.log("Anak tetangga");
} else {
  console.log("anak saya");
}


========================================================================
Day 6
Media only screen css => buat responsive


==========================================================
Day 7
HOF => parameter yang memiliki nilai  kembali. fungsi untuk menyalurkan fungsi lain ke fungsi lainnya
HOF Build in JS : map, filter, foreach
Callback => memanggil kembali function yang tersedia ?



===========================================================================
Day 8 
// console.log("Rahmat");

// function loop() {
//   for(let i = 0; i < 5; i++) {
//     console.log(`langkah ke ${i}`);
//   }
// }

// loop()

// console.log("Lidia");

console.log("Mulai");


function end() {
  console.log("End");
}

for(let i = 0; i < 5; i++) {
  asyncron(i, () => {
    if(i === 4) {
      end()
    }
  })
}


function asyncron(iterasi, callback) {
  setTimeout(() =>{
    console.log(`Langkah ${iterasi}`);
    callback()
  }, 1000)
}


const data = fetch('https://jsonplaceholder.typicode.com/users')
console.log(data);
fetch('https://jsonplaceholder.typicode.com/users')
  .then(res => console.log(res))
  .catch(res => console.log(res))


const isVip = true

const chekingVip = new Promise((resolve, reject) => {
  if(!isVip) {
    resolve("Member is VIP")
  } else {
    reject("Member isnt VIP")
  }
})

console.log(chekingVip);
chekingVip
  .then(response => console.log('yes ' + response))
  .catch(response => console.log('no ' + response))


const member = new Promise(res => {
  setTimeout(() => {
    res([{
      id: 1,
      name: "Dandi Saputra",
      isMember: true
    }])
  }, 1000)
})

const product = new Promise(res => {
  setTimeout(() => {
    res([{
      id: 1,
      name: "Monitor",
      price: 10000000
    }])
  }, 1000)
})

// member.then(res => console.log(res))
// product.then(res => console.log(res))
Promise.all([product, member])
  .then(res => console.log(res))





syncrhonous function
function batch() {
  return "Hallo batch 50"
}

console.log(batch())


 asynchronous function
function member() {
  return new Promise(res => {
    setTimeout(() => {
      res([{
        id: 1,
        name: "Dandi Saputra",
        isMember: true
      }])
    }, 5000)
  })
}

async function runMember() {
  const data = await member()
  console.log(data);
}

runMember()



function member() {
  return new Promise((resolve, reject) => {
    const time = 3000

    if(time < 5000) {
      resolve("run")
    } else {
      reject("time's up")
    }
  })
}

const runMember = async () => {
  try {
    const data = await member()
    console.log(data);
    // console.log(dadatata);
  } catch (error) {
    console.log(error);
  }
}

runMember()


AJAX => javascript untuk interaktif dan dinamic. biar aplikasi bisa ambil data dari server secara async. teknik agar bisa berjalan secara async. mempermudah website untuk mengupdate data secara async tanpa harus melalui proses load.





============================================================
app.get() -> GET membaca data.
app.post() -> POST buat data baru.
app.patch() -> PATCH buat mengupdate data.
app.delete() -> DELETE buat hapus data.


==============================================================================================================================================================================================================
backup data index.js day 11
const express = require("express");
const path = require("path");
const app = express();
const port = 5000;
const dateDuration = require('./src/helper/duration')


// pemanggilan untuk views hbs ditampilakn ke web
app.set("view engine", "hbs");
app.set("views", path.join(__dirname, "src/views"));

// set static file server
app.use(express.static(path.join("src/assets")));

// parcing data from client
app.use(express.urlencoded({ extended: false }));


// tampilan utama untuk card index/ data dummy
const dataBlog = [
  {
    id: 1,
    title: "Conan Tekken",
    author: "Conan",
    images: "card-a.jpg",
    postedAt: new Date(),
    content:
      "saya adalah manusia bisa terbang Sed ut perspiciatis, unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam eaque ipsa, quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt, explicabo. Nemo enim ipsam voluptatem, quia voluptas sit, aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos, qui ratione voluptatem sequi nesciunt, neque porro quisquam est, qui dolorem ipsum, quia dolor sit, amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt, ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi",
    nodeJs: true,
    js: true,
    react: false,
    vuejs: false,
  },
  {
    id: 2,
    title: "Buyung Nak Baik",
    author: "Buyung",
    images: "card-b.jpg",
    postedAt: new Date(),
    content: "Saya bujangan dari kampung tante",
    nodeJs: true,
    js: true,
    react: true,
    vuejs: false,
  },
  {
    id: 3,
    title: "Ngudud",
    author: "Iron Man",
    images: "card-c.jpg",
    postedAt: new Date(),
    content: "Saya ingin ngudud sambil  mandi apakah bisa begit pak rt",
    nodeJs: true,
    js: true,
    react: false,
    vuejs: true,
  },
];

app.listen(port, () => {
  console.log("Launch Web");
});

// routing
app.get("/", home);
app.get("/testimonial", testimonial);
app.get("/contact", contact);
app.get("/blog-detail", blogDetail);

app.get("/blog", blog);
app.post("/blog", addBlog);

app.get("/delete-blog/:id", deleteBlog);

app.post("/update-blog/:id", updateBlog);

app.get("/edit-blog/:id", editBlog);
app.post("/edit-blog/:id", updateBlog);


function home(req, res) {
  res.render("index", { dataBlog: dataBlog });
}

function testimonial(req, res) {
  res.render("testimonial");
}

function contact(req, res) {
  res.render("contact");
}

function blog(req, res) {
  res.render("blog");
}

// =====================================================================================
// blog detail
function blogDetail(req, res) {
  const { id } = req.params;

  const data = {
    id,
    title: "Dumbways Web App",
    content:
      "Hantu adalah roh dari orang atau hewan yang telah mati yang menampakkan wujudnya dalam kehidupan. Definisi dari hantu pada umumnya berbeda untuk setiap agama, peradaban, maupun adat istiadat. Dalam banyak kebudayaan, hantu tidak didefinisikan sebagai zat yang baik maupun jahat.",
  };
  res.render("blog-detail", { data });
}

// ===============================================================================
// add blog
function addBlog(req, res) {
  const {
    title,
    author,
    content,
    startDate,
    endDate,
    nodeJs,
    js,
    react,
    vuejs,
  } = req.body;

  let start = new Date(startDate);
  let end = new Date(endDate)

  if (start > end) {
    return res.send("You Fill End Date Before Start Date");
  }

  let difference = end.getTime() -start.getTime();
  let days = difference / (1000 * 3600 * 24);
  let weeks = Math.floor(days / 7);
  let months = Math.floor(weeks / 4);
  let Yeat = Math.floor(months / 12);
  let duration = "";

  if (years > 0){
    duration = years + " Tahun";
  } else if (months > 0) {
    duration = months + " Bulan";
  } else if (weeks > 0) {
    duration = weeks + " Minggu";
  }else if (days > 0) {
    duration = days + " Hari";
  }

  const data = {
    title: title,
    author: author,
    content: content,
    startDate: startDate,
    endDate: endDate,
    nodeJs: nodeJs,
    js: js,
    react: react,
    vuejs: vuejs,
    image: "image.png",
    postedAt: new Date(),
  };
  dataBlog.push(data);
  res.redirect("/");
  console.log(dataBlog);
}

// ======================================================================================
// delete blog
function deleteBlog(req, res) {
  const { id } = req.params;

  dataBlog.splice(id, 1);
  res.redirect("/");
}

// ========================================================================================
// edit to blog
function editBlog(req, res) {
  const { id } = req.params
  res.render("edit-blog",  { edit: dataBlog[id] })
}

// ========================================================================================
// update blog
function updateBlog(req, res) {
  const { id } = req.params
}


// ======================================================================================
// update Blog
function updateBlog(req, res) {
  const blogIndex = parseInt(req.body.blogIndex)
  const { title, content,  nodejs, js, reactjs, vuejs } = req.body

  dataBlog[blogIndex].title = title;
  dataBlog[blogIndex].content = content;
  dataBlog[blogIndex].node = nodejs;
  dataBlog[blogIndex].react = reactjs;
  dataBlog[blogIndex].js = js;
  dataBlog[blogIndex].vuejs = vuejs;
  // dataBlog[blogIndex].postedAt = new Date();
  console.log(title, content)
  res.redirect("/");
}